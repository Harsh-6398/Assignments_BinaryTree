/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        List<Integer> result = new ArrayList<>();
        if (root == null) return result;

        
        Map<TreeNode, TreeNode> parentMap = new HashMap<>();
        ParentsMap(root, null, parentMap);

       
        Queue<TreeNode> q = new LinkedList<>();
        Set<TreeNode> visited = new HashSet<>();

        q.add(target);
        visited.add(target);
        int dist = 0;

        while (!q.isEmpty()) {
            int size = q.size();

            if (dist == k) {
                for (TreeNode node : q) {
                    result.add(node.val);
                }
                return result;
            }

            for (int i = 0; i < size; i++) {
                TreeNode node = q.poll();

                
                if (node.left != null && visited.add(node.left)) {
                    q.add(node.left);
                }
                
                if (node.right != null && visited.add(node.right)) {
                    q.add(node.right);
                }
                
                TreeNode parent = parentMap.get(node);
                if (parent != null && visited.add(parent)) {
                    q.add(parent);
                }
            }
            dist++;
        }

        return result;
    }

    
    private void ParentsMap(TreeNode node, TreeNode parent, Map<TreeNode, TreeNode> parentMap) {
        if (node == null) return;
        parentMap.put(node, parent);
        ParentsMap(node.left, node, parentMap);
        ParentsMap(node.right, node, parentMap);
    }
}
