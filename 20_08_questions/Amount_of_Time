/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int amountOfTime(TreeNode root, int start) {
        if (root == null) return 0;
        Map<TreeNode, TreeNode> parentMap = new HashMap<>();
        TreeNode startNode = buildParentMapAndFind(root, null, start, parentMap);
        Queue<TreeNode> q = new LinkedList<>();
        Set<TreeNode> visited = new HashSet<>();
        q.add(startNode);
        visited.add(startNode);
        int time = -1;
        while (!q.isEmpty()) {
            int size = q.size();
            time++;
            for (int i = 0; i < size; i++) {
                TreeNode node = q.poll();
                if (node.left != null && visited.add(node.left)) q.add(node.left);
                if (node.right != null && visited.add(node.right)) q.add(node.right);
                TreeNode parent = parentMap.get(node);
                if (parent != null && visited.add(parent)) q.add(parent);
            }
        }
        return time;
    }

    public TreeNode buildParentMapAndFind(TreeNode node, TreeNode parent, int start, Map<TreeNode, TreeNode> parentMap) {
        if (node == null) return null;
        parentMap.put(node, parent);
        if (node.val == start) return node;
        TreeNode left = buildParentMapAndFind(node.left, node, start, parentMap);
        if (left != null) return left;
        return buildParentMapAndFind(node.right, node, start, parentMap);
    }
}
